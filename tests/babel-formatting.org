#+title: Tests

* Testing sessions:
:PROPERTIES:
:header-args: :results output drawer :tangle :session timer_formatting_tests
:END:

#+name: testing_sessions_set_variable
#+begin_src python
x = 1
#+end_src

#+name: testing_sessions_print
#+begin_src python
print(x*2)
#+end_src


* Timer formatting
:PROPERTIES:
:header-args: :results output drawer :python "nix-shell --run python"  :tangle :session timer_formatting_tests
:END:

Rounds by default, and shows by default:

#+name: timer
#+begin_src python
print(1)
import time
time.sleep(3)
#+end_src

Turn off timer-show to hide it

#+name: turn_off_timer
#+begin_src python :timer-show no
print(1)
#+end_src

Set :timer-rounded to no to get the full timer.
(Also modifying the timer string here so that my expect tests will skip it.)

#+name: not_rounded_timer
#+begin_src python :timer-rounded no :timer-string %expect_skip Cell Timer:
print(1)
#+end_src

* Table formatting
:PROPERTIES:
:header-args: :results output drawer :python "nix-shell --run python"  :tangle :session table_formatting :timer-show no
:END:

Dataframes are printed as org tables

#+name: print_table
#+begin_src python :results drawer
import pandas as pd
data = {
'Name': ['Joe', 'Eva', 'Charlie', 'David', 'Eva'],
'Age': [44, 32, 33,33, 22],
'City': ['New York', 'San Francisco', 'Boston', 'Paris', 'Tokyo'],
'Score': [92.5, 88.0, 95.2, 78.9, 90.11111]}
df = pd.DataFrame(data)
print(df)
#+end_src



To not print the index as idx, set something else as to be the index.

#+name: change_table_index
#+begin_src python
print(df.set_index("Name"))
#+end_src


This respects various pandas options:
*** Float formatting


#+name: format_table_floats
#+begin_src python
pd.options.display.float_format = '{:.1f}'.format
print(df.set_index("Name"))
#+end_src

*** Max rows

#+name: limit_table_max_rows
#+begin_src python
pd.options.display.max_rows = 10
long_df = pd.DataFrame({'A': range(200)})
print(long_df)
#+end_src

** Problem -- hangs when printing large dataframes.
:PROPERTIES:
:header-args: :results output drawer :python "nix-shell --run python"  :tangle :session table_formatting_large_dtfs :timer-show no
:END:

print_org_df sets max_rows to be 20 by default to avoid this issue.

#+name: print_long_table
#+begin_src python :tables-auto-align no
import pandas as pd
long_df = pd.DataFrame({'A': range(400)})
print(long_df)
#+end_src

If we make the max_rows even modestly large, we run into it, depending on computing resources.

#+name: print_medium_table
#+begin_src python :tables-auto-align no
pd.options.display.max_rows = 200
long_df = pd.DataFrame({'A': range(200)})
print(long_df)
#+end_src

** Printing multiple dataframes:

#+name: printing_multiple_dataframes
#+begin_src python
print(df)
print("Space between dataframes")
print(df)
#+end_src


In general space between dataframes requires ones below to be aligned.
I have an advise function ( adjust-org-babel-results ) that does this, but it can be slow if there are many tables in the org file, so it can be disabled like this.

#+name: tables_auto_align_off
#+begin_src python :tables-auto-align no
print(df)
print("Space between dataframes")
print(df)
#+end_src


* Testing Tabulate
:PROPERTIES:
:header-args: :results output drawer :python "nix-shell shell_with_tabulate.nix --run python"  :tangle :session test_tabulate :timer-show no
:END:

If Tabulate is available we can use it directly to formate the dataframe. This is built into pandas and the safer option.

#+name print_with_tabulate
#+begin_src python :results drawer
import pandas as pd
data = {
'Name': ['Joe', 'Eva', 'Charlie', 'David', 'Eva'],
'Age': [44, 32, 33,33, 22],
'City': ['New York', 'San Francisco', 'Boston', 'Paris', 'Tokyo'],
'Score': [92.5, 88.0, 95.2, 78.9, 90.11111]}
df = pd.DataFrame(data)
print(df)
#+end_src

* Images
:PROPERTIES:
:header-args: :results output drawer :python "nix-shell --run python"  :tangle :session project_images :timer-show no
:END:

mocks out python plotting to allow plots to be interspersed with printing, and allows multiple to be made. :)

#+name: table_with_plot_and_text
#+begin_src python :results drawer
import pandas as pd
import matplotlib.pyplot as plt
print("look!")
df = pd.DataFrame({"x": [0, 2, 3, 4, 5,6,7,], "y": [10, 11, 12, 13, 14,15,16]})
print(df)
df.plot(x="x", y="y", kind="line")
plt.show()
print("tada!")
#+end_src

* DONE Make : Alerts on finishing
* Alerts on finishing
:PROPERTIES:
:header-args: :results output drawer :python "nix-shell --run python"  :tangle :session alerts_on_finish :timer-show no
:END:

When this finishes, it alerts you in an emacs minibuffer, with a link back.
You also get a system alert. (This requires libnotify to be installed.)

#+begin_src python :alert yes
import time
print("waiting")
time.sleep(1)
print("finished")
#+end_src

#+begin_src python
import time
print("waiting")
time.sleep(1)
print("finished")
#+end_src

I also have it configured to send an alert for any cell that takes more than 10 seconds.

This parses the cell timer, so requires it to be enabled for that part to be on to work.
** TODO Change the cell timer display to leave it up for the parsing and delete the timer afterwards.
