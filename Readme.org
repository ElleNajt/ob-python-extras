#+title: Readme



* Overview:
:PROPERTIES:
:header-args: :results output drawer :python "nix-shell --run python" :async t :tangle :session project :timer-show no :exports both
:END:

This package adds additional features to ob-python that I found lacking.

** mix images and text in the output of cells.
This works by mocking out matplotlib and instead saving the images and returning text that refers to the saved images. These images are garbage collected regularly.
** pandas dataframes printed as org tables, always.
This works by overwriting the dunder repr method.

For instance, a cell like this is not possible (as far as the author is aware) with vanilla ob-python.

#+begin_src python :results drawer :exports both
import pandas as pd
import matplotlib.pyplot as plt
df = pd.DataFrame({"x": [1, 2, 3, 4, 5,6,7,], "y": [10, 11, 12, 13, 14,15,16]})
print(df)
df.plot(x="x", y="y", kind="line")
plt.show()
print("...tada!")
#+end_src

#+RESULTS:
:results:
| idx | x |  y |
|-----+---+----|
|   0 | 1 | 10 |
|   1 | 2 | 11 |
|   2 | 3 | 12 |
|   3 | 4 | 13 |
|   4 | 5 | 14 |
|   5 | 6 | 15 |
|   6 | 7 | 16 |
[[file:plots/Readme/plot_20241028_194825_8829674.png]]
...tada!
:end:

** Cell timer
#+begin_src python :timer-show :exports both
import time
time.sleep(1)
#+end_src

#+RESULTS:
:results:
Cell Timer: 0:00:01
:end:

** Capturing traceback and showing that it in the results, reducing the need for navigating to the python buffer.

#+begin_src python :exports both
print(1/0)
#+end_src

#+RESULTS:
:results:
Traceback (most recent call last):
File "<org babel source block>", line 9, in <module>
File "<org babel source block>", line 1, in <module>
ZeroDivisionError: division by zero
:end:

** Configurable alerts that tell you when long running cells finish.
These are disabled by default, since some users might find them annoying.
Currently these only are tested in doom emacs
** Additional features:
- shortcuts for things like cell-interruption and adding new cells.

* Installation
** With straight.el

#+begin_src emacs-lisp :tangle yes
(package! ob-python-extras
  :recipe (:host github
           :repo "ElleNajt/ob-python-extras"
           :files ("*.el" "python")))

#+end_src

#+begin_src emacs-lisp :tangle yes
(use-package! ob-python-extras)
#+end_src

* Setup:
** Keybindings:

If you want my suggested keybindings, run:

#+begin_src emacs-lisp :tangle yes
(ob-python-extras/map-suggested-keyindings)
#+end_src


