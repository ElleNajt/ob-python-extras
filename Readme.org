#+title: Readme



* Overview:
:PROPERTIES:
:header-args: :results output drawer :python "nix-shell --run python" :async t :tangle :session project :timer-show no :exports both
:END:

This package adds additional features to ob-python that I found lacking when trying to use it as a serious replacement for jupyter notebooks.

** mix images and text in the output of cells.
This works by mocking out matplotlib and instead saving the images and returning text that refers to the saved images. These images are garbage collected regularly.

*** Press C-c C-c over an image to open it full size in another buffer. (This dispatches to org-view-image-full-size)

** pandas dataframes printed as org tables, always.
This works by overwriting the dunder repr method.

For instance, a cell like this is not possible (as far as the author is aware) with vanilla ob-python.

#+begin_src python :results drawer :exports both
import pandas as pd
import matplotlib.pyplot as plt
df = pd.DataFrame({"x": [1, 2, 3, 4, 5,6,7,], "y": [10, 11, 12, 13, 14,15,16]})
print(df)
df.plot(x="x", y="y", kind="line")
plt.show()
print("...tada!")
#+end_src

#+RESULTS:
:results:
| idx | x |  y |
|-----+---+----|
|   0 | 1 | 10 |
|   1 | 2 | 11 |
|   2 | 3 | 12 |
|   3 | 4 | 13 |
|   4 | 5 | 14 |
|   5 | 6 | 15 |
|   6 | 7 | 16 |
[[file:plots/Readme/plot_20241112_201256_2165943.png]]
...tada!
:end:

For best behavior, have Tabulate installed in your python environment. When Tabulate is available, this can use a pandas built into format the dataframe directly to markdown. Otherwise, it falls back on some somewhat janky code.

** Cell timer
Configurable with :timer-show block option, for instance :timer-show no.

#+begin_src python :timer-show :exports both
import time
time.sleep(1)
#+end_src

#+RESULTS:
:results:
Cell Timer: 0:00:01
:end:


** Capturing traceback and showing that it in the results, reducing the need for navigating to the python buffer.

#+begin_src python :exports both
print(1/0)
#+end_src

#+RESULTS:
:results:
Traceback (most recent call last):
File "<org babel source block>", line 9, in <module>
File "<org babel source block>", line 1, in <module>
ZeroDivisionError: division by zero
:end:

Additionally, with the :errors rich parameter tracebacks are displayed using rich. Requires the rich library.

#+begin_src python :errors "rich" :exports both
print(1/0)
#+end_src

#+RESULTS:
:results:
╭───────────────────── Traceback (most recent call last) ──────────────────────╮
│ in <module>:8                                                                │
│ ╭───────────────────────────────── locals ─────────────────────────────────╮ │
│ │                bad_function = <function bad_function at 0xffff8fc23380>  │ │
│ │                     Console = <class 'rich.console.Console'>             │ │
│ │                     console = <console width=93 None>                    │ │
│ │                   exec_file = '/tmp/execution-codeVcXhmi'                │ │
│ │                        file = <_io.TextIOWrapper                         │ │
│ │                               name='/tmp/execution-codeVcXhmi' mode='r'  │ │
│ │                               encoding='UTF-8'>                          │ │
│ │  org_babel_wrapper_datetime = <class 'datetime.datetime'>                │ │
│ │                          os = <module 'os' (frozen)>                     │ │
│ │                print_org_df = <module 'print_org_df' from                │ │
│ │                               '/home/elle/.emacs.d/.local/straight/buil… │ │
│ │ pymockbabel_script_location = '/home/elle/.emacs.d/.local/straight/buil… │ │
│ │                rich_console = <console width=80 None>                    │ │
│ │                Rich_Console = <class 'rich.console.Console'>             │ │
│ │           rich_markdown_box = Box(...)                                   │ │
│ │              Rich_Traceback = <class 'rich.traceback.Traceback'>         │ │
│ │                       start = datetime.datetime(2024, 12, 6, 17, 17, 50, │ │
│ │                               947294)                                    │ │
│ │                         sys = <module 'sys' (built-in)>                  │ │
│ │                          tb = Trace(                                     │ │
│ │                               │   stacks=[                               │ │
│ │                               │   │   Stack(                             │ │
│ │                               │   │   │   exc_type='ZeroDivisionError',  │ │
│ │                               │   │   │   exc_value='division by zero',  │ │
│ │                               │   │   │   syntax_error=None,             │ │
│ │                               │   │   │   is_cause=False,                │ │
│ │                               │   │   │   frames=[                       │ │
│ │                               │   │   │   │   Frame(                     │ │
│ │                               │   │   │   │   │   filename='<org babel   │ │
│ │                               source block>',                            │ │
│ │                               │   │   │   │   │   lineno=8,              │ │
│ │                               │   │   │   │   │   name='<module>',       │ │
│ │                               │   │   │   │   │   line='',               │ │
│ │                               │   │   │   │   │   locals=None            │ │
│ │                               │   │   │   │   ),                         │ │
│ │                               │   │   │   │   Frame(                     │ │
│ │                               │   │   │   │   │   filename='<org babel   │ │
│ │                               source block>',                            │ │
│ │                               │   │   │   │   │   lineno=6,              │ │
│ │                               │   │   │   │   │   name='<module>',       │ │
│ │                               │   │   │   │   │   line='',               │ │
│ │                               │   │   │   │   │   locals=None            │ │
│ │                               │   │   │   │   ),                         │ │
│ │                               │   │   │   │   Frame(                     │ │
│ │                               │   │   │   │   │   filename='<org babel   │ │
│ │                               source block>',                            │ │
│ │                               │   │   │   │   │   lineno=5,              │ │
│ │                               │   │   │   │   │   name='bad_function',   │ │
│ │                               │   │   │   │   │   line='',               │ │
│ │                               │   │   │   │   │   locals=None            │ │
│ │                               │   │   │   │   )                          │ │
│ │                               │   │   │   ]                              │ │
│ │                               │   │   )                                  │ │
│ │                               │   ]                                      │ │
│ │                               )                                          │ │
│ │                        time = <module 'time' (built-in)>                 │ │
│ │                   Traceback = <class 'rich.traceback.Traceback'>         │ │
│ │                   traceback = <module 'traceback' from                   │ │
│ │                               '/nix/store/2m1ym6djbpczvwh4fbqph6k6hl1dy… │ │
│ ╰──────────────────────────────────────────────────────────────────────────╯ │
│ in <module>:1                                                                │
│ ╭───────────────────────────────── locals ─────────────────────────────────╮ │
│ │                bad_function = <function bad_function at 0xffff8fc23380>  │ │
│ │                     Console = <class 'rich.console.Console'>             │ │
│ │                     console = <console width=93 None>                    │ │
│ │                   exec_file = '/tmp/execution-codeVcXhmi'                │ │
│ │                        file = <_io.TextIOWrapper                         │ │
│ │                               name='/tmp/execution-codeVcXhmi' mode='r'  │ │
│ │                               encoding='UTF-8'>                          │ │
│ │  org_babel_wrapper_datetime = <class 'datetime.datetime'>                │ │
│ │                          os = <module 'os' (frozen)>                     │ │
│ │                print_org_df = <module 'print_org_df' from                │ │
│ │                               '/home/elle/.emacs.d/.local/straight/buil… │ │
│ │ pymockbabel_script_location = '/home/elle/.emacs.d/.local/straight/buil… │ │
│ │                rich_console = <console width=80 None>                    │ │
│ │                Rich_Console = <class 'rich.console.Console'>             │ │
│ │           rich_markdown_box = Box(...)                                   │ │
│ │              Rich_Traceback = <class 'rich.traceback.Traceback'>         │ │
│ │                       start = datetime.datetime(2024, 12, 6, 17, 17, 50, │ │
│ │                               947294)                                    │ │
│ │                         sys = <module 'sys' (built-in)>                  │ │
│ │                          tb = Trace(                                     │ │
│ │                               │   stacks=[                               │ │
│ │                               │   │   Stack(                             │ │
│ │                               │   │   │   exc_type='ZeroDivisionError',  │ │
│ │                               │   │   │   exc_value='division by zero',  │ │
│ │                               │   │   │   syntax_error=None,             │ │
│ │                               │   │   │   is_cause=False,                │ │
│ │                               │   │   │   frames=[                       │ │
│ │                               │   │   │   │   Frame(                     │ │
│ │                               │   │   │   │   │   filename='<org babel   │ │
│ │                               source block>',                            │ │
│ │                               │   │   │   │   │   lineno=8,              │ │
│ │                               │   │   │   │   │   name='<module>',       │ │
│ │                               │   │   │   │   │   line='',               │ │
│ │                               │   │   │   │   │   locals=None            │ │
│ │                               │   │   │   │   ),                         │ │
│ │                               │   │   │   │   Frame(                     │ │
│ │                               │   │   │   │   │   filename='<org babel   │ │
│ │                               source block>',                            │ │
│ │                               │   │   │   │   │   lineno=6,              │ │
│ │                               │   │   │   │   │   name='<module>',       │ │
│ │                               │   │   │   │   │   line='',               │ │
│ │                               │   │   │   │   │   locals=None            │ │
│ │                               │   │   │   │   ),                         │ │
│ │                               │   │   │   │   Frame(                     │ │
│ │                               │   │   │   │   │   filename='<org babel   │ │
│ │                               source block>',                            │ │
│ │                               │   │   │   │   │   lineno=5,              │ │
│ │                               │   │   │   │   │   name='bad_function',   │ │
│ │                               │   │   │   │   │   line='',               │ │
│ │                               │   │   │   │   │   locals=None            │ │
│ │                               │   │   │   │   )                          │ │
│ │                               │   │   │   ]                              │ │
│ │                               │   │   )                                  │ │
│ │                               │   ]                                      │ │
│ │                               )                                          │ │
│ │                        time = <module 'time' (built-in)>                 │ │
│ │                   Traceback = <class 'rich.traceback.Traceback'>         │ │
│ │                   traceback = <module 'traceback' from                   │ │
│ │                               '/nix/store/2m1ym6djbpczvwh4fbqph6k6hl1dy… │ │
│ ╰──────────────────────────────────────────────────────────────────────────╯ │
╰──────────────────────────────────────────────────────────────────────────────╯
ZeroDivisionError: division by zero
:end:

Add no-locals to turn off locals, frames to control the number of frames and extras to control the number of extra lines.

#+begin_src python :errors "rich no-locals frames 0 extra 5" :exports both
print(1/0)
def bad_function():
    a = 1
    b = 1
    denominator = 0
    print(1/denominator)
bad_function()
#+end_src

#+RESULTS:
:results:
╭───────────────────── Traceback (most recent call last) ──────────────────────╮
│ in <module>:8                                                                │
│ in <module>:1                                                                │
╰──────────────────────────────────────────────────────────────────────────────╯
ZeroDivisionError: division by zero
:end:

** Configurable alerts that tell you when long running cells finish.
These are disabled by default, since some users might find them annoying.
Currently these only are tested in doom emacs

** Gptel integrations:

I added functions patch-gptel-blocks, and send-block-to-gptel to send the contents of a block and its returned valued to a gptel buffer, and get a diff patch. This is useful for fixing quick mistakes.

This requires gptel-default-mode to be set to org-mode to work, since it expects an org block in the response.

#+begin_src emacs-lisp :tangle yes
(gptel-default-mode 'org-mode)
#+end_src

The conversation happens in the *CELL ERRORS* buffer.

| Key         | Command              | Description          |
|-------------+----------------------+----------------------|
| ~SPC o c s~ | ~send-block-to-gptel~ | Send block to GPTel, and ask for a fix. |
| ~SPC o c p~ | ~patch-gptel-blocks~ | Apply the fix |
| ~SPC o c f~ | ~gptel-fix-block~    | Do the two things at once  |

** Additional features:
- shortcuts for things like cell-interruption and adding new cells.


* Installation
** With straight.el

#+begin_src emacs-lisp :tangle yes
(package! ob-python-extras
  :recipe (:host github
           :repo "ElleNajt/ob-python-extras"
           :files ("*.el" "python")))

#+end_src

#+begin_src emacs-lisp :tangle yes
(use-package! ob-python-extras)
#+end_src

* Setup:
** Keybindings:

If you want my keybindings, run:

#+begin_src emacs-lisp :tangle yes
(ob-python-extras/map-suggested-keyindings)
#+end_src

* Other things:

In my personal config I use the following keybindings as well, based on a vendored version guilt-dolphin's org-evil with keybindings stripped, of which make it easier to manipulate source blocks:

#+begin_src emacs-lisp :tangle yes

(org-evil--define-key 'motion 'org-evil-motion-mode
                      "[[" 'org-evil-motion-backward-block-begin
                      "]]" 'org-evil-motion-forward-block-begin)

(add-hook! 'org-mode-hook 'org-evil-mode)

(undefine-key! evil-motion-state-map "[ s" "] s")

(map! (:mode org-mode
       :n "] r" #'org-babel-goto-src-block-results
       :n "[ s" 'org-evil-block-beginning-of-block
       :n "] s" 'org-evil-block-end-of-block))

(org-evil--define-key 'motion 'org-evil-block-mode
                      "[ s" 'org-evil-block-beginning-of-block
                      "] s" 'org-evil-block-end-of-block)

(dolist (mode '(operator visual))
  (org-evil--define-key mode 'org-evil-block-mode
                        "ib" 'org-evil-block-inner-block
                        "ab" 'org-evil-block-a-block))
#+end_src

* Todos:
** TODO Inheriting lsp stuff in special mode
** TODO The same magic as elisp has to not need special mode

** TODO add more verbose errors, e.g. options ot use stuff like:

import sys
import traceback
from pprint import pprint

def verbose_excepthook(type, value, tb):
    print("\n=== DETAILED ERROR REPORT ===")
    print(f"Error Type: {type.__name__}")
    print(f"Error Message: {str(value)}")
    print("\nFull traceback:")

    # Print each frame of the traceback
    for frame in traceback.extract_tb(tb):
        print(f"\nFile: {frame.filename}, Line {frame.lineno}")
        print(f"Function: {frame.name}")
        print(f"Code: {frame.line}")

        # Print local variables in this frame
        try:
            local_vars = frame.frame_locals.items()
            print("\nLocal variables:")
            pprint(local_vars)
        except:
            pass

    print("\n=== END ERROR REPORT ===")

sys.excepthook = verbose_excepthook
